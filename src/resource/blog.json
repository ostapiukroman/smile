[
    {
        "title": "TIL: Ecto supports a query inside another query-1",
        "thumbnail": "<img src=\"https://i.imgur.com/lhrJ9QR.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-1",
        "slug": "til-ecto-supports-query-inside-query-1",
        "authors": 1,
        "categories": [1, 2, 6],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-2",
        "thumbnail": "<img src=\"https://i.imgur.com/4hpiELF.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-2",
        "slug": "til-ecto-supports-query-inside-query-2",
        "authors": 2,
        "categories": 2,
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-3",
        "thumbnail": "<img src=\"https://i.imgur.com/m6R4oRs.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-3",
        "slug": "til-ecto-supports-query-inside-query-3",
        "authors": 3,
        "categories": [4, 5],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-4",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-4",
        "slug": "til-ecto-supports-query-inside-query-4",
        "authors": 4,
        "categories": [7, 8],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-5",
        "thumbnail": "<img src=\"https://i.imgur.com/RJb2fks.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-5",
        "slug": "til-ecto-supports-query-inside-query-5",
        "authors": 5,
        "categories": [1, 9],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-6",
        "thumbnail": "<img src=\"https://i.imgur.com/lhrJ9QR.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-6",
        "slug": "til-ecto-supports-query-inside-query-6",
        "authors": 1,
        "categories": [2, 10],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-7",
        "thumbnail": "<img src=\"https://i.imgur.com/XQEysi6.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-7",
        "slug": "til-ecto-supports-query-inside-query-7",
        "authors": 1,
        "categories": [1, 2],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-8",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-8",
        "slug": "til-ecto-supports-query-inside-query-8",
        "authors": 6,
        "categories": [6],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-9",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-9",
        "slug": "til-ecto-supports-query-inside-query-9",
        "authors": 7,
        "categories": [5],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-10",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-10",
        "slug": "til-ecto-supports-query-inside-query-10",
        "authors": 8,
        "categories": [9],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-11",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-11",
        "slug": "til-ecto-supports-query-inside-query-11",
        "authors": 9,
        "categories": [10],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-12",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-12",
        "slug": "til-ecto-supports-query-inside-query-12",
        "authors": 10,
        "categories": [4],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-13",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-13",
        "slug": "til-ecto-supports-query-inside-query-13",
        "authors": 2,
        "categories": [6],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-14",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-14",
        "slug": "til-ecto-supports-query-inside-query-14",
        "authors": 2,
        "categories": [1],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-15",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-15",
        "slug": "til-ecto-supports-query-inside-query-15",
        "authors": 6,
        "categories": [4, 8],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-16",
        "thumbnail": "<img src=\"https://i.imgur.com/8uagm5W.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-16",
        "slug": "til-ecto-supports-query-inside-query-16",
        "authors": 9,
        "categories": [2, 9],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-17",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-17",
        "slug": "til-ecto-supports-query-inside-query-17",
        "authors": 9,
        "categories": [7, 8],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-18",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-18",
        "slug": "til-ecto-supports-query-inside-query-18",
        "authors": 9,
        "categories": [3, 7],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-19",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-19",
        "slug": "til-ecto-supports-query-inside-query-19",
        "authors": 4,
        "categories": [8, 10],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-20",
        "thumbnail": "<img src=\"https://i.imgur.com/ZoOHvvc.png\">",
        "subtitle": "Here's what I learned in a year of full-remote.-20",
        "slug": "til-ecto-supports-query-inside-query-20",
        "authors": 1,
        "categories": [2],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    },
    {
        "title": "TIL: Ecto supports a query inside another query-21",
        "thumbnail": "<img src=\"https://i.imgur.com/jiOeJLU.jpg\">",
        "subtitle": "Here's what I learned in a year of full-remote.-21",
        "slug": "til-ecto-supports-query-inside-query-21",
        "authors": 1,
        "categories": [2],
        "date": "November 9th, 2017",
        "body": "<p><a href=\"http://elixir-lang.org/getting-started/pattern-matching.html\" title=\"\">Pattern matching</a> and <a href=\"http://elixir-lang.org/getting-started/case-cond-and-if.html#expressions-in-guard-clauses\" title=\"\">guard expressions</a> are fundamental towriting recursive function definitions in <a href=\"http://elixir-lang.org/\" title=\"\">Elixir</a>. Sometimes guard clauses and pattern matchingcan be used for the same purpose. For example:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># guard expression</span>\n <span class=\"token keyword\">defmodule</span> Exponent <span class=\"token keyword\">do</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> <span class=\"token number\">1</span>\n <span class=\"token keyword\">def</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> value <span class=\"token operator\">*</span> power<span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n <span class=\"token keyword\">end</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In both cases above, we only want the first <code class=\"inline\">power</code> function to run when the second argument is equal to <code class=\"inline\">0</code>.When it is as simple as equality, I tend to use the pattern matching syntax. I typically leave the guard for more complexlogic like <code class=\"inline\">when rem(x, divisor)==0</code>. However, to check whether one argument is equal to another I thought a guard was neccessary: <code class=\"inline\">when a==b</code>.But, <strong>today I learned</strong>, this can also be handled with pattern matching, like so:</p><pre class=\" line-numbers language-elixir\"><code class=\"elixir  language-elixir\"><span class=\"token comment\" spellcheck=\"true\"># guard</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">when</span> a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span>\n \n <span class=\"token comment\" spellcheck=\"true\"># pattern matching</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"equal\"</span>\n <span class=\"token keyword\">def</span> equality<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token attr-name\">do:</span> IO<span class=\"token punctuation\">.</span>puts <span class=\"token string\">\"not equal\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Tada! There you have it. It seems so simple I don’t know how I hadn’t tried it earlier!</p>"
    }
]
